/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const DESC = 'DESC';
/** @type {?} */
const ASC = 'ASC';
export class NgImageSliderService {
    constructor() { }
    /**
     * @param {?} str
     * @return {?}
     */
    isBase64(str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    base64FileExtension(str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    }
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    orderArray(arr = [], orderType = ASC) {
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            (ob1, ob2) => {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    }
}
NgImageSliderService.ɵfac = function NgImageSliderService_Factory(t) { return new (t || NgImageSliderService)(); };
NgImageSliderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgImageSliderService, factory: NgImageSliderService.ɵfac });
/** @nocollapse */
NgImageSliderService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgImageSliderService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1pbWFnZS1zbGlkZXIvbGliL25nLWltYWdlLXNsaWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFDZ0IsTUFBVixJQUFJLEdBQUcsTUFBTTtBQUNuQjtBQUNBLE1BREksR0FBRyxHQUFHLEtBQUs7QUFHZixNQUFNLE9BQU8sb0JBQW9CO0FBQ2pDLElBQ0ksZ0JBQWdCLENBQUM7QUFDckI7QUFDTztBQUNFO0FBQW1CO0FBQVEsSUFEaEMsUUFBUSxDQUFDLEdBQUc7QUFDaEI7QUFBeUIsWUFBYixXQUFXLEdBQUcsa0VBQWtFO0FBQzVGLFFBQVEsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLElBQ0ksQ0FBQztBQUNMO0FBQ087QUFBc0I7QUFDWjtBQUFRLElBRHJCLG1CQUFtQixDQUFDLEdBQUc7QUFDM0IsUUFBUSxPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDM0UsSUFBSSxDQUFDO0FBQ0w7QUFDTztBQUF1QjtBQUNmO0FBQW1CO0FBQ2hDLElBRkUsVUFBVSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsU0FBUyxHQUFHLEdBQUc7QUFDeEMsUUFBUSxJQUFJLENBQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLE1BQU0sS0FBSSxTQUFTLEVBQUU7QUFDdEMsWUFBWSxPQUFPLEdBQUcsQ0FBQyxJQUFJO0FBQU07QUFDZDtBQUE4QjtBQUNuQztBQUNkLFlBSDRCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0FBQ3pDLGdCQUFnQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDNUQsb0JBQW9CLE9BQU8sQ0FBQyxDQUFDO0FBQzdCLGlCQUFpQjtBQUNqQixxQkFBcUIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ2pFLG9CQUFvQixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzlCLGlCQUFpQjtBQUNqQixxQkFBcUIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQ3RELG9CQUFvQixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7QUFDNUMsd0JBQXdCLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEMscUJBQXFCO0FBQUMseUJBQUs7QUFDM0Isd0JBQXdCLE9BQU8sQ0FBQyxDQUFDO0FBQ2pDLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakIscUJBQXFCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN0RCxvQkFDb0IsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQzVDLHdCQUF3QixPQUFPLENBQUMsQ0FBQztBQUNqQyxxQkFBcUI7QUFBQyx5QkFBSztBQUMzQix3QkFBd0IsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsQyxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLFlBQVksQ0FBQyxFQUFDLENBQUM7QUFDZixTQUFTO0FBQ1QsUUFBUSxPQUFPLEdBQUcsQ0FBQztBQUNuQixJQUFJLENBQUM7QUFDTDtnREEzQ0MsVUFBVTs0SEFDVDtBQUFDO0FBQW1COzs7Z0RBSWI7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgREVTQyA9ICdERVNDJyxcbiAgICBBU0MgPSAnQVNDJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nSW1hZ2VTbGlkZXJTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBpc0Jhc2U2NChzdHIpIHtcbiAgICAgICAgdmFyIGJhc2U2NHJlZ2V4ID0gL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvO1xuICAgICAgICByZXR1cm4gYmFzZTY0cmVnZXgudGVzdChzdHIpO1xuXG4gICAgfVxuXG4gICAgYmFzZTY0RmlsZUV4dGVuc2lvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoXCJkYXRhOmltYWdlL1wiLmxlbmd0aCwgc3RyLmluZGV4T2YoXCI7YmFzZTY0XCIpKTtcbiAgICB9XG5cbiAgICBvcmRlckFycmF5KGFyciA9IFtdLCBvcmRlclR5cGUgPSBBU0MpIHtcbiAgICAgICAgaWYgKGFycj8ubGVuZ3RoICYmIG9yZGVyVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5zb3J0KChvYjEsIG9iMikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvYjFbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMVsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IyWydvcmRlciddID09PSBudWxsIHx8ICFvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjFbJ29yZGVyJ10gPiBvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyVHlwZSA9PT0gREVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IxWydvcmRlciddIDwgb2IyWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBERVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxufVxuIl19
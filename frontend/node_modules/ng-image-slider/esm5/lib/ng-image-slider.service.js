/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-image-slider.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
var DESC = 'DESC';
/** @type {?} */
var ASC = 'ASC';
var NgImageSliderService = /** @class */ (function () {
    function NgImageSliderService() {
    }
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.isBase64 = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
        return base64regex.test(str);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NgImageSliderService.prototype.base64FileExtension = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substring("data:image/".length, str.indexOf(";base64"));
    };
    /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    NgImageSliderService.prototype.orderArray = /**
     * @param {?=} arr
     * @param {?=} orderType
     * @return {?}
     */
    function (arr, orderType) {
        if (arr === void 0) { arr = []; }
        if (orderType === void 0) { orderType = ASC; }
        if ((arr === null || arr === void 0 ? void 0 : arr.length) && orderType) {
            return arr.sort((/**
             * @param {?} ob1
             * @param {?} ob2
             * @return {?}
             */
            function (ob1, ob2) {
                if (ob1['order'] === null || !ob1['order']) {
                    return 1;
                }
                else if (ob2['order'] === null || !ob2['order']) {
                    return -1;
                }
                else if (ob1['order'] > ob2['order']) {
                    if (orderType === DESC) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
                else if (ob1['order'] < ob2['order']) {
                    if (orderType === DESC) {
                        return 1;
                    }
                    else {
                        return -1;
                    }
                }
            }));
        }
        return arr;
    };
    /** @nocollapse */
    NgImageSliderService.ctorParameters = function () { return []; };
NgImageSliderService.ɵfac = function NgImageSliderService_Factory(t) { return new (t || NgImageSliderService)(); };
NgImageSliderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NgImageSliderService, factory: function (t) { return NgImageSliderService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgImageSliderService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NgImageSliderService;
}());
export { NgImageSliderService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9uZy1pbWFnZS1zbGlkZXIvbGliL25nLWltYWdlLXNsaWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFDZ0IsSUFBVixJQUFJLEdBQUcsTUFBTTtBQUNuQjtBQUNBLElBREksR0FBRyxHQUFHLEtBQUs7QUFFZjtBQUdLLElBQUQ7QUFFVyxJQUZLLENBQUM7QUFDckI7QUFDTztBQUNFO0FBQW1CO0FBQVEsSUFEaEMsdUNBQVE7QUFBTztBQUNFO0FBQW1CO0FBQVEsSUFENUMsVUFBUyxHQUFHO0FBQ2hCO0FBQXlCLFlBQWIsV0FBVyxHQUFHLGtFQUFrRTtBQUM1RixRQUFRLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNyQyxJQUNJLENBQUM7QUFFTDtBQUFRO0FBQXNCO0FBQ1o7QUFBUSxJQUR0QixrREFBbUI7QUFBTztBQUNUO0FBQW1CO0FBQVEsSUFENUMsVUFBb0IsR0FBRztBQUMzQixRQUFRLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUMzRSxJQUFJLENBQUM7QUFFTDtBQUFRO0FBQXVCO0FBQ2Y7QUFBbUI7QUFDaEMsSUFGQyx5Q0FBVTtBQUFPO0FBQ3JCO0FBQTZCO0FBQ3JCO0FBQVEsSUFGWixVQUFXLEdBQVEsRUFBRSxTQUFlO0FBQ3hDLFFBRGUsb0JBQUEsRUFBQSxRQUFRO0FBQUksUUFBRiwwQkFBQSxFQUFBLGVBQWU7QUFDeEMsUUFBUSxJQUFJLENBQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLE1BQU0sS0FBSSxTQUFTLEVBQUU7QUFDdEMsWUFBWSxPQUFPLEdBQUcsQ0FBQyxJQUFJO0FBQU07QUFDZDtBQUE4QjtBQUNuQztBQUNkLFlBSDRCLFVBQUMsR0FBRyxFQUFFLEdBQUc7QUFBSSxnQkFDekIsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzVELG9CQUFvQixPQUFPLENBQUMsQ0FBQztBQUM3QixpQkFBaUI7QUFDakIscUJBQXFCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUNqRSxvQkFBb0IsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM5QixpQkFBaUI7QUFDakIscUJBQXFCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtBQUN0RCxvQkFBb0IsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO0FBQzVDLHdCQUF3QixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLHFCQUFxQjtBQUFDLHlCQUFLO0FBQzNCLHdCQUF3QixPQUFPLENBQUMsQ0FBQztBQUNqQyxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLHFCQUFxQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDdEQsb0JBQ29CLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtBQUM1Qyx3QkFBd0IsT0FBTyxDQUFDLENBQUM7QUFDakMscUJBQXFCO0FBQUMseUJBQUs7QUFDM0Isd0JBQXdCLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEMscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQixZQUFZLENBQUMsRUFBQyxDQUFDO0FBQ2YsU0FBUztBQUNULFFBQVEsT0FBTyxHQUFHLENBQUM7QUFDbkIsSUFBSSxDQUFDLENBekNDO0FBQUM7aUNBRE4sVUFBVSwzQ0FDbUI7Ozs7O2dEQUtYO0FBQUMsSUFxQ3BCLDJCQUFDO0FBQ0EsQ0FEQSxBQTNDRCxJQTJDQztBQUNELFNBM0NhLG9CQUFvQjtBQUVqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgREVTQyA9ICdERVNDJyxcbiAgICBBU0MgPSAnQVNDJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nSW1hZ2VTbGlkZXJTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBpc0Jhc2U2NChzdHIpIHtcbiAgICAgICAgdmFyIGJhc2U2NHJlZ2V4ID0gL14oWzAtOWEtekEtWisvXXs0fSkqKChbMC05YS16QS1aKy9dezJ9PT0pfChbMC05YS16QS1aKy9dezN9PSkpPyQvO1xuICAgICAgICByZXR1cm4gYmFzZTY0cmVnZXgudGVzdChzdHIpO1xuXG4gICAgfVxuXG4gICAgYmFzZTY0RmlsZUV4dGVuc2lvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoXCJkYXRhOmltYWdlL1wiLmxlbmd0aCwgc3RyLmluZGV4T2YoXCI7YmFzZTY0XCIpKTtcbiAgICB9XG5cbiAgICBvcmRlckFycmF5KGFyciA9IFtdLCBvcmRlclR5cGUgPSBBU0MpIHtcbiAgICAgICAgaWYgKGFycj8ubGVuZ3RoICYmIG9yZGVyVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5zb3J0KChvYjEsIG9iMikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvYjFbJ29yZGVyJ10gPT09IG51bGwgfHwgIW9iMVsnb3JkZXInXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IyWydvcmRlciddID09PSBudWxsIHx8ICFvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvYjFbJ29yZGVyJ10gPiBvYjJbJ29yZGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9yZGVyVHlwZSA9PT0gREVTQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAob2IxWydvcmRlciddIDwgb2IyWydvcmRlciddKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXJUeXBlID09PSBERVNDKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxufVxuIl19
import { ChangeDetectorRef, OnInit, OnChanges, DoCheck, SimpleChanges, AfterViewInit, OnDestroy, EventEmitter, ElementRef } from '@angular/core';
import { NgImageSliderService } from './ng-image-slider.service';
import * as ɵngcc0 from '@angular/core';
export declare class NgImageSliderComponent implements OnChanges, OnInit, DoCheck, AfterViewInit, OnDestroy {
    private cdRef;
    private platformId;
    imageSliderService: NgImageSliderService;
    private elRef;
    sliderMainDivWidth: number;
    imageParentDivWidth: number;
    imageObj: Array<object>;
    ligthboxImageObj: Array<object>;
    totalImages: number;
    leftPos: number;
    effectStyle: string;
    speed: number;
    sliderPrevDisable: boolean;
    sliderNextDisable: boolean;
    slideImageCount: number;
    sliderImageWidth: number;
    sliderImageReceivedWidth: number | string;
    sliderImageHeight: number;
    sliderImageReceivedHeight: number | string;
    sliderImageSizeWithPadding: number;
    autoSlideCount: number;
    stopSlideOnHover: boolean;
    autoSlideInterval: any;
    showArrowButton: boolean;
    textDirection: string;
    imageMargin: number;
    sliderOrderType: string;
    private swipeCoord?;
    private swipeTime?;
    ligthboxShow: boolean;
    activeImageIndex: number;
    visiableImageIndex: number;
    sliderMain: any;
    imageDiv: any;
    set imageSize(data: any);
    infinite: boolean;
    imagePopup: boolean;
    set direction(dir: string);
    set animationSpeed(data: number);
    images: Array<object>;
    set slideImage(count: any);
    set autoSlide(count: any);
    set showArrow(flag: any);
    set orderType(data: string);
    videoAutoPlay: boolean;
    paginationShow: boolean;
    arrowKeyMove: boolean;
    manageImageRatio: boolean;
    showVideoControls: boolean;
    set defaultActiveImage(activeIndex: number);
    lazyLoading: boolean;
    imageClick: EventEmitter<number>;
    arrowClick: EventEmitter<object>;
    lightboxArrowClick: EventEmitter<object>;
    lightboxClose: EventEmitter<object>;
    onResize(event: any): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    constructor(cdRef: ChangeDetectorRef, platformId: Object, imageSliderService: NgImageSliderService, elRef: ElementRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    setSliderImages(imgObj: any): void;
    setSliderWidth(): void;
    imageOnClick(index: any): void;
    imageAutoSlide(): void;
    imageMouseEnterHandler(): void;
    prev(): void;
    next(): void;
    prevImg(): void;
    nextImg(): void;
    infinitePrevImg(): void;
    infiniteNextImg(): void;
    getVisiableIndex(): void;
    /**
     * Disable slider left/right arrow when image moving
     */
    sliderArrowDisableTeam(msg: any): void;
    nextPrevSliderButtonDisable(msg?: any): void;
    showLightbox(): void;
    close(): void;
    lightboxArrowClickHandler(event: any): void;
    /**
     * Swipe event handler
     * Reference from https://stackoverflow.com/a/44511007/2067646
     */
    swipe(e: TouchEvent, when: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgImageSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgImageSliderComponent, "ng-image-slider", never, { "infinite": "infinite"; "imagePopup": "imagePopup"; "images": "images"; "videoAutoPlay": "videoAutoPlay"; "paginationShow": "paginationShow"; "arrowKeyMove": "arrowKeyMove"; "manageImageRatio": "manageImageRatio"; "showVideoControls": "showVideoControls"; "lazyLoading": "lazyLoading"; "imageSize": "imageSize"; "direction": "direction"; "animationSpeed": "animationSpeed"; "slideImage": "slideImage"; "autoSlide": "autoSlide"; "showArrow": "showArrow"; "orderType": "orderType"; "defaultActiveImage": "defaultActiveImage"; }, { "imageClick": "imageClick"; "arrowClick": "arrowClick"; "lightboxArrowClick": "lightboxArrowClick"; "lightboxClose": "lightboxClose"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctaW1hZ2Utc2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZy1pbWFnZS1zbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQsIE9uQ2hhbmdlcywgRG9DaGVjaywgU2ltcGxlQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZy1pbWFnZS1zbGlkZXIuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ0ltYWdlU2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIERvQ2hlY2ssIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjZFJlZjtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgaW1hZ2VTbGlkZXJTZXJ2aWNlOiBOZ0ltYWdlU2xpZGVyU2VydmljZTtcbiAgICBwcml2YXRlIGVsUmVmO1xuICAgIHNsaWRlck1haW5EaXZXaWR0aDogbnVtYmVyO1xuICAgIGltYWdlUGFyZW50RGl2V2lkdGg6IG51bWJlcjtcbiAgICBpbWFnZU9iajogQXJyYXk8b2JqZWN0PjtcbiAgICBsaWd0aGJveEltYWdlT2JqOiBBcnJheTxvYmplY3Q+O1xuICAgIHRvdGFsSW1hZ2VzOiBudW1iZXI7XG4gICAgbGVmdFBvczogbnVtYmVyO1xuICAgIGVmZmVjdFN0eWxlOiBzdHJpbmc7XG4gICAgc3BlZWQ6IG51bWJlcjtcbiAgICBzbGlkZXJQcmV2RGlzYWJsZTogYm9vbGVhbjtcbiAgICBzbGlkZXJOZXh0RGlzYWJsZTogYm9vbGVhbjtcbiAgICBzbGlkZUltYWdlQ291bnQ6IG51bWJlcjtcbiAgICBzbGlkZXJJbWFnZVdpZHRoOiBudW1iZXI7XG4gICAgc2xpZGVySW1hZ2VSZWNlaXZlZFdpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgc2xpZGVySW1hZ2VIZWlnaHQ6IG51bWJlcjtcbiAgICBzbGlkZXJJbWFnZVJlY2VpdmVkSGVpZ2h0OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgc2xpZGVySW1hZ2VTaXplV2l0aFBhZGRpbmc6IG51bWJlcjtcbiAgICBhdXRvU2xpZGVDb3VudDogbnVtYmVyO1xuICAgIHN0b3BTbGlkZU9uSG92ZXI6IGJvb2xlYW47XG4gICAgYXV0b1NsaWRlSW50ZXJ2YWw6IGFueTtcbiAgICBzaG93QXJyb3dCdXR0b246IGJvb2xlYW47XG4gICAgdGV4dERpcmVjdGlvbjogc3RyaW5nO1xuICAgIGltYWdlTWFyZ2luOiBudW1iZXI7XG4gICAgc2xpZGVyT3JkZXJUeXBlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBzd2lwZUNvb3JkPztcbiAgICBwcml2YXRlIHN3aXBlVGltZT87XG4gICAgbGlndGhib3hTaG93OiBib29sZWFuO1xuICAgIGFjdGl2ZUltYWdlSW5kZXg6IG51bWJlcjtcbiAgICB2aXNpYWJsZUltYWdlSW5kZXg6IG51bWJlcjtcbiAgICBzbGlkZXJNYWluOiBhbnk7XG4gICAgaW1hZ2VEaXY6IGFueTtcbiAgICBzZXQgaW1hZ2VTaXplKGRhdGE6IGFueSk7XG4gICAgaW5maW5pdGU6IGJvb2xlYW47XG4gICAgaW1hZ2VQb3B1cDogYm9vbGVhbjtcbiAgICBzZXQgZGlyZWN0aW9uKGRpcjogc3RyaW5nKTtcbiAgICBzZXQgYW5pbWF0aW9uU3BlZWQoZGF0YTogbnVtYmVyKTtcbiAgICBpbWFnZXM6IEFycmF5PG9iamVjdD47XG4gICAgc2V0IHNsaWRlSW1hZ2UoY291bnQ6IGFueSk7XG4gICAgc2V0IGF1dG9TbGlkZShjb3VudDogYW55KTtcbiAgICBzZXQgc2hvd0Fycm93KGZsYWc6IGFueSk7XG4gICAgc2V0IG9yZGVyVHlwZShkYXRhOiBzdHJpbmcpO1xuICAgIHZpZGVvQXV0b1BsYXk6IGJvb2xlYW47XG4gICAgcGFnaW5hdGlvblNob3c6IGJvb2xlYW47XG4gICAgYXJyb3dLZXlNb3ZlOiBib29sZWFuO1xuICAgIG1hbmFnZUltYWdlUmF0aW86IGJvb2xlYW47XG4gICAgc2hvd1ZpZGVvQ29udHJvbHM6IGJvb2xlYW47XG4gICAgc2V0IGRlZmF1bHRBY3RpdmVJbWFnZShhY3RpdmVJbmRleDogbnVtYmVyKTtcbiAgICBsYXp5TG9hZGluZzogYm9vbGVhbjtcbiAgICBpbWFnZUNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBhcnJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8b2JqZWN0PjtcbiAgICBsaWdodGJveEFycm93Q2xpY2s6IEV2ZW50RW1pdHRlcjxvYmplY3Q+O1xuICAgIGxpZ2h0Ym94Q2xvc2U6IEV2ZW50RW1pdHRlcjxvYmplY3Q+O1xuICAgIG9uUmVzaXplKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGhhbmRsZUtleWJvYXJkRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcGxhdGZvcm1JZDogT2JqZWN0LCBpbWFnZVNsaWRlclNlcnZpY2U6IE5nSW1hZ2VTbGlkZXJTZXJ2aWNlLCBlbFJlZjogRWxlbWVudFJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIHNldFNsaWRlckltYWdlcyhpbWdPYmo6IGFueSk6IHZvaWQ7XG4gICAgc2V0U2xpZGVyV2lkdGgoKTogdm9pZDtcbiAgICBpbWFnZU9uQ2xpY2soaW5kZXg6IGFueSk6IHZvaWQ7XG4gICAgaW1hZ2VBdXRvU2xpZGUoKTogdm9pZDtcbiAgICBpbWFnZU1vdXNlRW50ZXJIYW5kbGVyKCk6IHZvaWQ7XG4gICAgcHJldigpOiB2b2lkO1xuICAgIG5leHQoKTogdm9pZDtcbiAgICBwcmV2SW1nKCk6IHZvaWQ7XG4gICAgbmV4dEltZygpOiB2b2lkO1xuICAgIGluZmluaXRlUHJldkltZygpOiB2b2lkO1xuICAgIGluZmluaXRlTmV4dEltZygpOiB2b2lkO1xuICAgIGdldFZpc2lhYmxlSW5kZXgoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIHNsaWRlciBsZWZ0L3JpZ2h0IGFycm93IHdoZW4gaW1hZ2UgbW92aW5nXG4gICAgICovXG4gICAgc2xpZGVyQXJyb3dEaXNhYmxlVGVhbShtc2c6IGFueSk6IHZvaWQ7XG4gICAgbmV4dFByZXZTbGlkZXJCdXR0b25EaXNhYmxlKG1zZz86IGFueSk6IHZvaWQ7XG4gICAgc2hvd0xpZ2h0Ym94KCk6IHZvaWQ7XG4gICAgY2xvc2UoKTogdm9pZDtcbiAgICBsaWdodGJveEFycm93Q2xpY2tIYW5kbGVyKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN3aXBlIGV2ZW50IGhhbmRsZXJcbiAgICAgKiBSZWZlcmVuY2UgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDQ1MTEwMDcvMjA2NzY0NlxuICAgICAqL1xuICAgIHN3aXBlKGU6IFRvdWNoRXZlbnQsIHdoZW46IHN0cmluZyk6IHZvaWQ7XG59XG4iXX0=